----QUIT/NOSAVE----2023-05-30T22:48:55.027171-04:00 Pharo.image priorSource: 228716!----QUIT/NOSAVE----2023-05-30T22:54:07.139689-04:00 Pharo.image priorSource: 228716!----QUIT/NOSAVE----2023-05-30T22:54:42.126015-04:00 Pharo.image priorSource: 228716!!RaindropsTest commentStamp: '' prior: 0!# RaindropsConvert a number to a string, the contents of which depend on the number's factors.- If the number has 3 as a factor, output 'Pling'.- If the number has 5 as a factor, output 'Plang'.- If the number has 7 as a factor, output 'Plong'.- If the number does not have 3, 5, or 7 as a factor,  just pass the number's digits straight through.## Examples- 28's factors are 1, 2, 4, **7**, 14, 28.  - In raindrop-speak, this would be a simple "Plong".- 30's factors are 1, 2, **3**, **5**, 6, 10, 15, 30.  - In raindrop-speak, this would be a "PlingPlang".- 34 has four factors: 1, 2, 17, and 34.  - In raindrop-speak, this would be "34".## HintTry to focus on using Test Driven Development for this exercise. Run the tests, one by one and try to solve the problem incrementally as it unfolds. When everything passes, see if you can refactor it to make it less repetitive.!!RaindropsTest class methodsFor: 'config'!exercise	"Answer the configured exercise meta data for this exercise, an ExercismExercise"		^(self createExerciseAfter: LeapTest)		isCore: false;		difficulty: 2;		topics: #('strings' 'conditionals' 'logic');		yourself	! !!RaindropsTest class methodsFor: 'config'!uuid	"Answer a unique id for this exercise"	^'c0bcb6c5-3f3f-0d00-995d-a4720043fb1f'! !!RaindropsTest class methodsFor: 'config'!version	"Generated from specification: 27 February 2019"	^'1.1.0'! !!RaindropsTest methodsFor: 'running'!setUp	super setUp.	raindropsCalculator := Raindrops new! !!RaindropsTest methodsFor: 'tests'!test01_TheSoundFor1Is1	| result |	result := raindropsCalculator convertNumber: 1 .	self assert: result equals: '1'! !!RaindropsTest methodsFor: 'tests'!test02_TheSoundFor3IsPling	| result |	result := raindropsCalculator convertNumber: 3 .	self assert: result equals: 'Pling'! !!RaindropsTest methodsFor: 'tests'!test03_TheSoundFor5IsPlang	| result |	result := raindropsCalculator convertNumber: 5 .	self assert: result equals: 'Plang'! !!RaindropsTest methodsFor: 'tests'!test04_TheSoundFor7IsPlong	| result |	result := raindropsCalculator convertNumber: 7 .	self assert: result equals: 'Plong'! !!RaindropsTest methodsFor: 'tests'!test05_TheSoundFor6IsPlingAsItHasAFactor3	| result |	result := raindropsCalculator convertNumber: 6 .	self assert: result equals: 'Pling'! !!RaindropsTest methodsFor: 'tests'!test06_2ToThePower3DoesNotMakeARaindropSoundAs3IsTheExponentNotTheBase	| result |	result := raindropsCalculator convertNumber: 8 .	self assert: result equals: '8'! !!RaindropsTest methodsFor: 'tests'!test07_TheSoundFor9IsPlingAsItHasAFactor3	| result |	result := raindropsCalculator convertNumber: 9 .	self assert: result equals: 'Pling'! !!RaindropsTest methodsFor: 'tests'!test08_TheSoundFor10IsPlangAsItHasAFactor5	| result |	result := raindropsCalculator convertNumber: 10 .	self assert: result equals: 'Plang'! !!RaindropsTest methodsFor: 'tests'!test09_TheSoundFor14IsPlongAsItHasAFactorOf7	| result |	result := raindropsCalculator convertNumber: 14 .	self assert: result equals: 'Plong'! !!RaindropsTest methodsFor: 'tests'!test10_TheSoundFor15IsPlingPlangAsItHasFactors3And5	| result |	result := raindropsCalculator convertNumber: 15 .	self assert: result equals: 'PlingPlang'! !!RaindropsTest methodsFor: 'tests'!test11_TheSoundFor21IsPlingPlongAsItHasFactors3And7	| result |	result := raindropsCalculator convertNumber: 21 .	self assert: result equals: 'PlingPlong'! !!RaindropsTest methodsFor: 'tests'!test12_TheSoundFor25IsPlangAsItHasAFactor5	| result |	result := raindropsCalculator convertNumber: 25 .	self assert: result equals: 'Plang'! !!RaindropsTest methodsFor: 'tests'!test13_TheSoundFor27IsPlingAsItHasAFactor3	| result |	result := raindropsCalculator convertNumber: 27 .	self assert: result equals: 'Pling'! !!RaindropsTest methodsFor: 'tests'!test14_TheSoundFor35IsPlangPlongAsItHasFactors5And7	| result |	result := raindropsCalculator convertNumber: 35 .	self assert: result equals: 'PlangPlong'! !!RaindropsTest methodsFor: 'tests'!test15_TheSoundFor49IsPlongAsItHasAFactor7	| result |	result := raindropsCalculator convertNumber: 49 .	self assert: result equals: 'Plong'! !!RaindropsTest methodsFor: 'tests'!test16_TheSoundFor52Is52	| result |	result := raindropsCalculator convertNumber: 52 .	self assert: result equals: '52'! !!RaindropsTest methodsFor: 'tests'!test17_TheSoundFor105IsPlingPlangPlongAsItHasFactors35And7	| result |	result := raindropsCalculator convertNumber: 105 .	self assert: result equals: 'PlingPlangPlong'! !!RaindropsTest methodsFor: 'tests'!test18_TheSoundFor3125IsPlangAsItHasAFactor5	| result |	result := raindropsCalculator convertNumber: 3125 .	self assert: result equals: 'Plang'! !!SpaceAge methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:32' prior: 33782714!ageOnPlanet: aString at: anInteger 	| orbitalPeriod |	orbitalPeriod := {		'Earth' -> 1 .		'Mercury' -> 0.2408467 .		'Venus' -> 0.61519726 .		'Mars' -> 1.8808158 .		'Jupiter' -> 11.862615 .		'Saturn' -> 29.447498 .		'Uranus' -> 84.016846 .		'Neptune' -> 164.79132 . 		} asDictionary .	^ anInteger / 31557600 / (orbitalPeriod at: aString)! !Object subclass: #Raindrops		instanceVariableNames: '' 		classVariableNames: ''		category: 'Exercise@Raindrops'!!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:33'!convertNumber: anInteger 	self shouldBeImplemented.! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:34' prior: 33560161!convertNumber: anInteger 	^ '1'! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:37' prior: 33560301!convertNumber: anInteger 	^ anInteger toString ! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:38' prior: 33560421!convertNumber: anInteger 	^ anInteger toString! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:44' prior: 33560557!convertNumber: anInteger 	^ anInteger printStringBase: 10! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:54' prior: 33560692!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:each | result , anInteger printStringBase: 10 ] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:57' prior: 33560838!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		'Pling' -> 3 .		'Plang' -> 5 .		'Plong' -> 7 .	} asDictionary .	sounds do: [:each | result , anInteger printStringBase: 10 ] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:58' prior: 33561142!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		'Pling' -> 3 .		'Plang' -> 5 .		'Plong' -> 7 .	} asDictionary .	sounds do: [:each | result , '1' ] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 18:58' prior: 33561446!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		'Pling' -> 3 .		'Plang' -> 5 .		'Plong' -> 7 .	} asDictionary .	sounds do: [:each | (result , '1') ] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:01' prior: 33561724!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		'Pling' -> 3 .		'Plang' -> 5 .		'Plong' -> 7 .	} asDictionary .	sounds do: [:each | result := result , '1' ] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:02' prior: 33562004!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		'Pling' -> 3 .		'Plang' -> 5 .		'Plong' -> 7 .	} asDictionary .	sounds do: [:sound | result := result , sound ] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:04' prior: 33562292!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		'Pling' -> 3 .		'Plang' -> 5 .		'Plong' -> 7 .	} asDictionary .	sounds do: [:sound | 		Transcript show: sound .		result := result , sound .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:06' prior: 33562583!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:sound | 		Transcript show: sound .		result := result , sound .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:08' prior: 33562907!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:factor :sound | 		Transcript show: sound .		Transcript show: factor .		result := result , sound .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:11' prior: 33563231!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:factor :sound | 		(anInteger \\ factor = 0) ifTrue: (result := result , sound) .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:13' prior: 33563591!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:factor :sound | 		(anInteger \\ factor = 0) ifTrue: [result := result , sound] .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:14' prior: 33563932!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:factor :sound | 		(anInteger \\ factor = 0)			ifTrue: [result := result , sound] .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:15' prior: 33564273!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:sound | 		(anInteger \\ 3 = 0)			ifTrue: [result := result , sound] .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:16' prior: 33564617!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds do: [:factor :sound | 		(anInteger \\ 3 = 0)			ifTrue: [result := result , sound] .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:19' prior: 33564948!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds associationsDo: [:pair | 		(anInteger \\ pair key = 0)			ifTrue: [result := result , pair value] .	] .	^ result! !!Raindrops methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:20' prior: 33565287!convertNumber: anInteger	| sounds result |	result := '' .	sounds := { 		3 -> 'Pling' .		5 -> 'Plang' .		7 -> 'Plong' .	} asDictionary .	sounds associationsDo: [:pair | 		(anInteger \\ pair key = 0)			ifTrue: [result := result , pair value] .	] .	result = ''		ifTrue: [result := anInteger asString] .	^ result! !----SNAPSHOT----2023-05-31T19:21:27.475314-04:00 Pharo.image priorSource: 228716!!IsogramTest commentStamp: '' prior: 0!# IsogramDetermine if a word or phrase is an isogram.An isogram (also known as a "nonpattern word") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.Examples of isograms:- lumberjacks- background- downstream- six-year-oldThe word *isograms*, however, is not an isogram, because the s repeats.## HintThere is a range of interesting data types in Pharo, it's worth taking the time to browse the  hierarchy of class Collection and reading some of the class comments and running some of the examples.!!IsogramTest class methodsFor: 'config'!exercise	"Answer the configured exercise meta data for this exercise, an ExercismExercise"		^(self createExerciseAfter: ReverseStringTest)		isCore: true;		difficulty: 2;		topics: #('strings' 'iteration');		yourself! !!IsogramTest class methodsFor: 'config'!uuid	"Answer a unique id for this exercise"	^'9e0074be-4a3f-0d00-bb4e-73e5071d6982'! !!IsogramTest class methodsFor: 'config'!version	"Generated from specification: 28 February 2019"	^'1.7.0'! !!IsogramTest methodsFor: 'running'!setUp	super setUp.	isogramCalculator := Isogram new! !!IsogramTest methodsFor: 'tests'!test01_CheckIfTheGivenStringIsAnIsogramEmptyString	| result |	result := isogramCalculator isIsogramPhrase: '' .	self assert: result equals: true! !!IsogramTest methodsFor: 'tests'!test02_CheckIfTheGivenStringIsAnIsogramIsogramWithOnlyLowerCaseCharacters	| result |	result := isogramCalculator isIsogramPhrase: 'isogram' .	self assert: result equals: true! !!IsogramTest methodsFor: 'tests'!test03_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacter	| result |	result := isogramCalculator isIsogramPhrase: 'eleven' .	self assert: result equals: false! !!IsogramTest methodsFor: 'tests'!test04_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacterFromTheEndOfTheAlphabet	| result |	result := isogramCalculator isIsogramPhrase: 'zzyzx' .	self assert: result equals: false! !!IsogramTest methodsFor: 'tests'!test05_CheckIfTheGivenStringIsAnIsogramLongestReportedEnglishIsogram	| result |	result := isogramCalculator isIsogramPhrase: 'subdermatoglyphic' .	self assert: result equals: true! !!IsogramTest methodsFor: 'tests'!test06_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCase	| result |	result := isogramCalculator isIsogramPhrase: 'Alphabet' .	self assert: result equals: false! !!IsogramTest methodsFor: 'tests'!test07_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCaseLowercaseFirst	| result |	result := isogramCalculator isIsogramPhrase: 'alphAbet' .	self assert: result equals: false! !!IsogramTest methodsFor: 'tests'!test08_CheckIfTheGivenStringIsAnIsogramHypotheticalIsogrammicWordWithHyphen	| result |	result := isogramCalculator isIsogramPhrase: 'thumbscrew-japingly' .	self assert: result equals: true! !!IsogramTest methodsFor: 'tests'!test09_CheckIfTheGivenStringIsAnIsogramHypotheticalWordWithDuplicatedCharacterFollowingHyphen	| result |	result := isogramCalculator isIsogramPhrase: 'thumbscrew-jappingly' .	self assert: result equals: false! !!IsogramTest methodsFor: 'tests'!test10_CheckIfTheGivenStringIsAnIsogramIsogramWithDuplicatedHyphen	| result |	result := isogramCalculator isIsogramPhrase: 'six-year-old' .	self assert: result equals: true! !!IsogramTest methodsFor: 'tests'!test11_CheckIfTheGivenStringIsAnIsogramMadeupNameThatIsAnIsogram	| result |	result := isogramCalculator isIsogramPhrase: 'Emily Jung Schwartzkopf' .	self assert: result equals: true! !!IsogramTest methodsFor: 'tests'!test12_CheckIfTheGivenStringIsAnIsogramDuplicatedCharacterInTheMiddle	| result |	result := isogramCalculator isIsogramPhrase: 'accentor' .	self assert: result equals: false! !!IsogramTest methodsFor: 'tests'!test13_CheckIfTheGivenStringIsAnIsogramSameFirstAndLastCharacters	| result |	result := isogramCalculator isIsogramPhrase: 'angola' .	self assert: result equals: false! !Object subclass: #Isogram		instanceVariableNames: '' 		classVariableNames: ''		category: 'Exercise@Isogram'!!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:36'!isIsogramPhrase: aString 	self shouldBeImplemented.! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:36' prior: 33570316!isIsogramPhrase: aString 	^ True! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:36' prior: 33570454!isIsogramPhrase: aString 	^ true! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:45' prior: 33570573!isIsogramPhrase: aString	| isIsogram previousLetters |	isIsogram := true .	previousLetters := Set new .	aString do: [ :char | 		(previousLetters includes: char) 			ifTrue: [isIsogram := false] 			ifFalse: [previousLetters add: char]	] .	^ isIsogram .	! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:48' prior: 33570692!isIsogramPhrase: aString	| isIsogram previousLetters |	isIsogram := true .	previousLetters := Set new .	aString do: [ :char | 		(previousLetters includes: char) 			ifTrue: [isIsogram := false] .		(char isAlphaNumeric)			ifTrue: [ previousLetters add: char ] .	] .	^ isIsogram .	! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:48' prior: 33571039!isIsogramPhrase: aString	| isIsogram previousLetters |	isIsogram := true .	previousLetters := Set new .	aString do: [ :char | 		(previousLetters includes: char) 			ifTrue: [isIsogram := false] .		(char isAlphaNumeric)			ifTrue: [ previousLetters add: char capitalized ] .	] .	^ isIsogram .	! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:48' prior: 33571414!isIsogramPhrase: aString	| isIsogram previousLetters |	isIsogram := true .	previousLetters := Set new .	aString do: [ :char | 		(previousLetters includes: char) 			ifTrue: [isIsogram := false] .		(char isAlphaNumeric)			ifTrue: [ previousLetters add: char lowercase  ] .	] .	^ isIsogram .	! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:48' prior: 33571801!isIsogramPhrase: aString	| isIsogram previousLetters |	isIsogram := true .	previousLetters := Set new .	aString do: [ :char | 		(previousLetters includes: char) 			ifTrue: [isIsogram := false] .		(char isAlphaNumeric)			ifTrue: [ previousLetters add: char lowercase ] .	] .	^ isIsogram .	! !!Isogram methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:50' prior: 33572187!isIsogramPhrase: aString	| isIsogram previousLetters lowercaseChar |	isIsogram := true .	previousLetters := Set new .	aString do: [ :char | 		lowercaseChar := char lowercase .		(previousLetters includes: lowercaseChar ) 			ifTrue: [isIsogram := false] .		(char isAlphaNumeric)			ifTrue: [ previousLetters add: lowercaseChar ] .	] .	^ isIsogram .	! !!LeapTest commentStamp: '' prior: 0!# LeapGiven a year, report if it is a leap year.The tricky thing here is that a leap year in the Gregorian calendar occurs:```texton every year that is evenly divisible by 4  except every year that is evenly divisible by 100    unless the year is also evenly divisible by 400```For example, 1997 is not a leap year, but 1996 is.  1900 is not a leapyear, but 2000 is.## NotesThough our exercise adopts some very simple rules, there is more tolearn!!For a delightful, four minute explanation of the whole leap yearphenomenon, go watch [this youtube video][video].[video]: http://www.youtube.com/watch?v=xX96xng7sAE## HintThe tests for this exercise (and future exercises), are prefix numbered like 'test00_'. This is not a normal convention in Pharo, however to ease the study of the language it is useful to present tests in a deterministic order.For this exercise, study the 'arithmetic' method category for class Number, as well as how boolean operators are also defined as messages. Notice how "and:" and "or:" are implented in the classes True and False. You can use the context menu item "senders of..." to view how other parts of Pharo use these operators.You may also find something useful trying... `World > Tools > Finder > Examples > 20 . 4 . true`<br> which is asking Pharo which operations between the first and second elements result in the third.<br> [View demo][demo][demo]: https://github.com/exercism/pharo-smalltalk/raw/master/docs/images/Hint-Finder-Leap.gif!!LeapTest class methodsFor: 'config'!exercise	"Answer the configured exercise meta data for this exercise, an ExercismExercise"		^(self createExerciseAfter: TwoFerTest)		isCore: true;		difficulty: 1;		topics: #('math' 'conditionals' 'logic');		yourself					! !!LeapTest class methodsFor: 'config'!uuid	"Answer a unique id for this exercise"	^'82b07f5c-119c-4250-8c07-a0a7e1a95458'! !!LeapTest class methodsFor: 'config'!version	"Generated from specification: 25 February 2019"	^'1.5.1'! !!LeapTest methodsFor: 'running'!setUp	super setUp.	leapCalculator := Leap new! !!LeapTest methodsFor: 'tests'!test01_YearNotDivisibleBy4CommonYear	| result |	result := leapCalculator leapYear: 2015 .	self assert: result equals: false! !!LeapTest methodsFor: 'tests'!test02_YearDivisibleBy2NotDivisibleBy4CommonYear	| result |	result := leapCalculator leapYear: 1970 .	self assert: result equals: false! !!LeapTest methodsFor: 'tests'!test03_YearDivisibleBy4NotDivisibleBy100LeapYear	| result |	result := leapCalculator leapYear: 1996 .	self assert: result equals: true! !!LeapTest methodsFor: 'tests'!test04_YearDivisibleBy100NotDivisibleBy400CommonYear	| result |	result := leapCalculator leapYear: 2100 .	self assert: result equals: false! !!LeapTest methodsFor: 'tests'!test05_YearDivisibleBy400LeapYear	| result |	result := leapCalculator leapYear: 2000 .	self assert: result equals: true! !!LeapTest methodsFor: 'tests'!test06_YearDivisibleBy200NotDivisibleBy400CommonYear	| result |	result := leapCalculator leapYear: 1800 .	self assert: result equals: false! !!LeapTest methodsFor: 'extra'!testMisuseOfSelector	self verifySolution: leapCalculator class avoidsSelector: #isLeapYear! !Object subclass: #Leap		instanceVariableNames: '' 		classVariableNames: ''		category: 'Exercise@Leap'!!Leap methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:53'!leapYear: anInteger 	self shouldBeImplemented.! !!Leap methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 19:56' prior: 33576396!leapYear: year 	^ (year % 400 = 0) or: ((year % 4 = 0) and: (year % 100 ~= 0))! !----SNAPSHOT----2023-05-31T19:56:47.464432-04:00 Pharo.image priorSource: 11534!!TwelveDaysTest commentStamp: '' prior: 0!# Twelve DaysOutput the lyrics to 'The Twelve Days of Christmas'.```textOn the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.```## HintIts handy to have a list of the verses:^ #(	'a Partridge in a Pear Tree'	'two Turtle Doves'	'three French Hens'	'four Calling Birds'	'five Gold Rings'	'six Geese-a-Laying' 	'seven Swans-a-Swimming' 	'eight Maids-a-Milking' 	'nine Ladies Dancing'	'ten Lords-a-Leaping' 	'eleven Pipers Piping' 	'twelve Drummers Drumming' )!!TwelveDaysTest class methodsFor: 'config'!exercise	"Answer the configured exercise meta data for this exercise, an ExercismExercise"		^(self createExerciseAfter: TwoFerTest)		isCore: false;		difficulty: 2;		topics: #('strings' 'iteration' 'text_formatting');		yourself					! !!TwelveDaysTest class methodsFor: 'config'!uuid	"Answer a unique id for this exercise"	^'7047d916-9d41-0d00-8ff2-3a9808866539'! !!TwelveDaysTest class methodsFor: 'config'!version	"Generated from specification: 29 March 2019"	^'1.2.0'! !!TwelveDaysTest methodsFor: 'running'!setUp	super setUp.	twelveDaysCalculator := TwelveDays new! !!TwelveDaysTest methodsFor: 'tests'!test01_VerseFirstDayAPartridgeInAPearTree	| result |	result := twelveDaysCalculator reciteStartVerse: 1 endVerse: 1 .	self assert: result equals: #('On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test02_VerseSecondDayTwoTurtleDoves	| result |	result := twelveDaysCalculator reciteStartVerse: 2 endVerse: 2 .	self assert: result equals: #('On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test03_VerseThirdDayThreeFrenchHens	| result |	result := twelveDaysCalculator reciteStartVerse: 3 endVerse: 3 .	self assert: result equals: #('On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test04_VerseFourthDayFourCallingBirds	| result |	result := twelveDaysCalculator reciteStartVerse: 4 endVerse: 4 .	self assert: result equals: #('On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test05_VerseFifthDayFiveGoldRings	| result |	result := twelveDaysCalculator reciteStartVerse: 5 endVerse: 5 .	self assert: result equals: #('On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test06_VerseSixthDaySixGeesealaying	| result |	result := twelveDaysCalculator reciteStartVerse: 6 endVerse: 6 .	self assert: result equals: #('On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test07_VerseSeventhDaySevenSwansaswimming	| result |	result := twelveDaysCalculator reciteStartVerse: 7 endVerse: 7 .	self assert: result equals: #('On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test08_VerseEighthDayEightMaidsamilking	| result |	result := twelveDaysCalculator reciteStartVerse: 8 endVerse: 8 .	self assert: result equals: #('On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test09_VerseNinthDayNineLadiesDancing	| result |	result := twelveDaysCalculator reciteStartVerse: 9 endVerse: 9 .	self assert: result equals: #('On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test10_VerseTenthDayTenLordsaleaping	| result |	result := twelveDaysCalculator reciteStartVerse: 10 endVerse: 10 .	self assert: result equals: #('On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test11_VerseEleventhDayElevenPipersPiping	| result |	result := twelveDaysCalculator reciteStartVerse: 11 endVerse: 11 .	self assert: result equals: #('On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test12_VerseTwelfthDayTwelveDrummersDrumming	| result |	result := twelveDaysCalculator reciteStartVerse: 12 endVerse: 12 .	self assert: result equals: #('On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test13_LyricsRecitesFirstThreeVersesOfTheSong	| result |	result := twelveDaysCalculator reciteStartVerse: 1 endVerse: 3 .	self assert: result equals: #('On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.' 'On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.' 'On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test14_LyricsRecitesThreeVersesFromTheMiddleOfTheSong	| result |	result := twelveDaysCalculator reciteStartVerse: 4 endVerse: 6 .	self assert: result equals: #('On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !!TwelveDaysTest methodsFor: 'tests'!test15_LyricsRecitesTheWholeSong	| result |	result := twelveDaysCalculator reciteStartVerse: 1 endVerse: 12 .	self assert: result equals: #('On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.' 'On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.' 'On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' 'On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.' )! !Object subclass: #TwelveDays		instanceVariableNames: '' 		classVariableNames: ''		category: 'Exercise@TwelveDays'!!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:00'!reciteStartVerse: anInteger endVerse: anInteger2 	self shouldBeImplemented.! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:00' prior: 33588854!reciteStartVerse: anInteger endVerse: anInteger2 	^ 'nothing'! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:10' prior: 33589019!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := Array new .	start to: end do: [ :verse | song put: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:11' prior: 33589170!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := Array new .	start to: end do: [ :verse | song add: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:12' prior: 33589910!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := #()	start to: end do: [ :verse | song add: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:13' prior: 33590650!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := #() .	start to: end do: [ :verse | song add: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:15' prior: 33591382!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := Array new: (end - start + 1) .	start to: end do: [ :verse | song add: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:17' prior: 33592116!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := { } .	start to: end do: [ :verse | song add: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:20' prior: 33592875!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := { } .	start to: end do: [ :verse | song put: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:21' prior: 33593609!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := Array new: (end - start + 1) .	start to: end do: [ :verse | song at: (start - verse) put: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:21' prior: 33594343!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := Array new: (end - start + 1) .	start to: end do: [ :verse | song at: (start - verse + 1) put: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) ] .	^ song! !!TwelveDays methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:22' prior: 33595122!reciteStartVerse: start endVerse: end 	| verses cardinal song |	cardinal := #('first' 'second' 'third' 'fourth' 'fifth' 'sixth' 'seventh' 'eigth' 'ninth' 'tenth' 'eleventh' 'twelfth') .	verses := #( 'a Partridge in a Pear Tree' 'two Turtle Doves' 'three French Hens' 'four Calling Birds' 'five Gold Rings' 'six Geese-a-Laying' 'seven Swans-a-Swimming' 'eight Maids-a-Milking' 'nine Ladies Dancing' 'ten Lords-a-Leaping' 'eleven Pipers Piping' 'twelve Drummers Drumming' ) .	song := Array new: (end - start + 1) .	start to: end do: [ :verse | song at: (start - verse + 1) put: 'On the ' , (cardinal at: verse) , ' day of Christmas my true love gave to me: ' , (verses at: verse) , '.' ] .	^ song! !----SNAPSHOT----2023-05-31T20:23:30.693702-04:00 Pharo.image priorSource: 22176!!GrainsTest commentStamp: '' prior: 0!# GrainsCalculate the number of grains of wheat on a chessboard given that the numberon each square doubles.There once was a wise servant who saved the life of a prince. The kingpromised to pay whatever the servant could dream up. Knowing that theking loved chess, the servant told the king he would like to have grainsof wheat. One grain on the first square of a chess board, with the numberof grains doubling on each successive square.There are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).Write code that shows:- how many grains were on a given square, and- the total number of grains on the chessboard## For bonus pointsDid you get the tests passing and the code clean? If you want to, theseare some additional things you could try:- Optimize for speed.- Optimize for readability.Then please share your thoughts in a comment on the submission. Did thisexperiment make the code better? Worse? Did you learn anything from it?## HintThese kinds of problems (where an answer is dependent on a previous) one are often called recursion. There are different ways to code for recursion, it might be worth reasearching if you are not familiar with this. Pharo is well optimised for recursion, and it is a commonly used pattern.Note: in the original problem specification, the grainsCalculator is called via #square, however we have renamed this method #atSquare: which is a more Smalltalk like name, that better describes that you are asking for an answer "at a square".  !!GrainsTest class methodsFor: 'config'!exercise	"Answer the configured exercise meta data for this exercise, an ExercismExercise"		^(self createExerciseAfter: IsogramTest)		isCore: true;		difficulty: 2;		topics: #('math' 'recursion');		yourself! !!GrainsTest class methodsFor: 'config'!uuid	"Answer a unique id for this exercise"	^'93dde1bb-8040-0d00-812a-052301deb008'! !!GrainsTest class methodsFor: 'config'!version	"Generated from specification: 15 March 2019"	^'1.2.0'! !!GrainsTest methodsFor: 'running'!setUp	super setUp.	grainsCalculator := Grains new! !!GrainsTest methodsFor: 'tests'!test01_ReturnsTheNumberOfGrainsOnTheSquareAt1	| result |	result := grainsCalculator atSquare: 1 .	self assert: result equals: 1! !!GrainsTest methodsFor: 'tests'!test02_ReturnsTheNumberOfGrainsOnTheSquareAt2	| result |	result := grainsCalculator atSquare: 2 .	self assert: result equals: 2! !!GrainsTest methodsFor: 'tests'!test03_ReturnsTheNumberOfGrainsOnTheSquareAt3	| result |	result := grainsCalculator atSquare: 3 .	self assert: result equals: 4! !!GrainsTest methodsFor: 'tests'!test04_ReturnsTheNumberOfGrainsOnTheSquareAt4	| result |	result := grainsCalculator atSquare: 4 .	self assert: result equals: 8! !!GrainsTest methodsFor: 'tests'!test05_ReturnsTheNumberOfGrainsOnTheSquareAt16	| result |	result := grainsCalculator atSquare: 16 .	self assert: result equals: 32768! !!GrainsTest methodsFor: 'tests'!test06_ReturnsTheNumberOfGrainsOnTheSquareAt32	| result |	result := grainsCalculator atSquare: 32 .	self assert: result equals: 2147483648! !!GrainsTest methodsFor: 'tests'!test07_ReturnsTheNumberOfGrainsOnTheSquareAt64	| result |	result := grainsCalculator atSquare: 64 .	self assert: result equals: 9223372036854775808! !!GrainsTest methodsFor: 'tests'!test08_ReturnsTheNumberOfGrainsOnTheSquareSquare0RaisesAnException	self		should: [grainsCalculator atSquare: 0]		raise: Error		whoseDescriptionIncludes: 'square must be between 1 and 64'		description: 'Should get an error with the correct description'.						! !!GrainsTest methodsFor: 'tests'!test09_ReturnsTheNumberOfGrainsOnTheSquareNegativeSquareRaisesAnException	self		should: [grainsCalculator atSquare: -1]		raise: Error		whoseDescriptionIncludes: 'square must be between 1 and 64'		description: 'Should get an error with the correct description'.! !!GrainsTest methodsFor: 'tests'!test10_ReturnsTheNumberOfGrainsOnTheSquareSquareGreaterThan64RaisesAnException	self		should: [grainsCalculator atSquare: 65]		raise: Error		whoseDescriptionIncludes: 'square must be between 1 and 64'		description: 'Should get an error with the correct description'.! !!GrainsTest methodsFor: 'tests'!test11_ReturnsTheTotalNumberOfGrainsOnTheBoard	| result |	result := grainsCalculator total.	self assert: result equals: 18446744073709551615! !Object subclass: #Grains		instanceVariableNames: '' 		classVariableNames: ''		category: 'Exercise@Grains'!!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:24'!atSquare: anInteger 	self shouldBeImplemented.! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:26' prior: 33601348!atSquare: square 	^ 2 raisedTo: square  ! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:27' prior: 33601480!atSquare: square 	^ 2 raisedTo: (square - 1)! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:29' prior: 33601606!atSquare: square	(square < 1 or: square > 64)		ifTrue: Error describes: 'square must be between 1 and 64' .	^ 2 raisedTo: (square - 1)! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:29' prior: 33601736!atSquare: square	(square < 1 or: square > 64)		ifTrue: [Error describes: 'square must be between 1 and 64'] .	^ 2 raisedTo: (square - 1)! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:32' prior: 33601958!atSquare: square	(square < 1 or: square > 64)		ifTrue: [^ Error new describes:  'square must be between 1 and 64'] .	^ 2 raisedTo: (square - 1)! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:32' prior: 33602182!atSquare: square	(square < 1 or: square > 64)		ifTrue: [^ Error new describes: 'square must be between 1 and 64'] .	^ 2 raisedTo: (square - 1)! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:33' prior: 33602413!atSquare: square	(square < 1 or: square > 64)		ifTrue: [^ Error new describes: 'square must be between 1 and 64']		ifFalse: [ ^ 2 raisedTo: (square - 1) ] .! !!Grains methodsFor: 'class' stamp: 'CalebWeeks 5/31/2023 20:34' prior: 33602643!atSquare: square	(square < 1 or: square > 64)		ifTrue: [^ Error new signal: 'square must be between 1 and 64']		ifFalse: [ ^ 2 raisedTo: (square - 1) ] .! !!Grains methodsFor: 'as yet unclassified' stamp: 'CalebWeeks 5/31/2023 20:35'!total	self shouldBeImplemented.! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:36' prior: 33603126!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + self atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:37' prior: 33603247!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + Grains atSquare: square  ] .	! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:37' prior: 33603440!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + Grains atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:37' prior: 33603627!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + self atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:38' prior: 33603822!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + Grains atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:38' prior: 33604015!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + Grains new atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:39' prior: 33604210!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + Grains atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:40' prior: 33604409!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + 2 raisedTo: (square - 1)  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:40' prior: 33604604!total	| result |	result := 0 .	1 to: 64 do: [ :square | result + (2 raisedTo: (square - 1))  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:41' prior: 33604800!total	| result |	result := 0 .	1 to: 64 do: [ :square | result := result + (2 raisedTo: (square - 1))  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:41' prior: 33604998!total	| result |	result := 0 .	1 to: 64 do: [ :square | result := result + self atSquare: square  ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:41' prior: 33605206!total	| result |	result := 0 .	1 to: 64 do: [ :square | result := result + self atSquare: square ] .	^ result! !!Grains methodsFor: 'accessing' stamp: 'CalebWeeks 5/31/2023 20:42' prior: 33605409!total	| result |	result := 0 .	1 to: 64 do: [ :square | result := result + (self atSquare: square) ] .	^ result! !----SNAPSHOT----2023-05-31T20:44:30.243639-04:00 Pharo.image priorSource: 42176!----QUIT----2023-05-31T20:44:35.589863-04:00 Pharo.image priorSource: 51297!