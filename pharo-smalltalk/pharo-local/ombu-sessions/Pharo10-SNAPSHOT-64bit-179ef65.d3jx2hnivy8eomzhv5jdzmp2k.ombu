OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.105488-04:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-179ef65.1waa5jisqs6vdlfsr6nbe8p4h', '419' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Raindrops',		#affectedPackageName : #'Exercise@Raindrops'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.109057-04:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #RaindropsTest\r\tinstanceVariableNames: \'raindropsCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Raindrops\'',				#superclassName : 'ExercismTest'			},			#name : #RaindropsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RaindropsTest,						#isMetaSide : false					},					#name : #raindropsCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RaindropsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'RaindropsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RaindropsTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Raindrops',			#package : #'Exercise@Raindrops',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.12122-04:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #RaindropsTest\r\tinstanceVariableNames: \'raindropsCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Raindrops\'',				#superclassName : 'ExercismTest'			},			#name : #RaindropsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RaindropsTest,						#isMetaSide : false					},					#name : #raindropsCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RaindropsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'RaindropsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RaindropsTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Raindrops\r\rConvert a number to a string, the contents of which depend on the number\'s factors.\r\r- If the number has 3 as a factor, output \'Pling\'.\r- If the number has 5 as a factor, output \'Plang\'.\r- If the number has 7 as a factor, output \'Plong\'.\r- If the number does not have 3, 5, or 7 as a factor,\r  just pass the number\'s digits straight through.\r\r## Examples\r\r- 28\'s factors are 1, 2, 4, **7**, 14, 28.\r  - In raindrop-speak, this would be a simple "Plong".\r- 30\'s factors are 1, 2, **3**, **5**, 6, 10, 15, 30.\r  - In raindrop-speak, this would be a "PlingPlang".\r- 34 has four factors: 1, 2, 17, and 34.\r  - In raindrop-speak, this would be "34".\r\r## Hint\r\rTry to focus on using Test Driven Development for this exercise. Run the tests, one by one and try to solve the problem incrementally as it unfolds. When everything passes, see if you can refactor it to make it less repetitive.\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Raindrops',			#package : #'Exercise@Raindrops',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Raindrops\r\rConvert a number to a string, the contents of which depend on the number\'s factors.\r\r- If the number has 3 as a factor, output \'Pling\'.\r- If the number has 5 as a factor, output \'Plang\'.\r- If the number has 7 as a factor, output \'Plong\'.\r- If the number does not have 3, 5, or 7 as a factor,\r  just pass the number\'s digits straight through.\r\r## Examples\r\r- 28\'s factors are 1, 2, 4, **7**, 14, 28.\r  - In raindrop-speak, this would be a simple "Plong".\r- 30\'s factors are 1, 2, **3**, **5**, 6, 10, 15, 30.\r  - In raindrop-speak, this would be a "PlingPlang".\r- 34 has four factors: 1, 2, 17, and 34.\r  - In raindrop-speak, this would be "34".\r\r## Hint\r\rTry to focus on using Test Driven Development for this exercise. Run the tests, one by one and try to solve the problem incrementally as it unfolds. When everything passes, see if you can refactor it to make it less repetitive.\r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.812189-04:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RaindropsTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: LeapTest)\r\t\tisCore: false;\r\t\tdifficulty: 2;\r\t\ttopics: #(\'strings\' \'conditionals\' \'logic\');\r\t\tyourself\r\t',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.816096-04:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RaindropsTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'c0bcb6c5-3f3f-0d00-995d-a4720043fb1f\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.843088-04:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RaindropsTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 27 February 2019"\r\t^\'1.1.0\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.845921-04:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\traindropsCalculator := Raindrops new',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.848507-04:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test01_TheSoundFor1Is1,			#protocol : #tests,			#sourceCode : 'test01_TheSoundFor1Is1\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 1 .\r\tself assert: result equals: \'1\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.849518-04:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test02_TheSoundFor3IsPling,			#protocol : #tests,			#sourceCode : 'test02_TheSoundFor3IsPling\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 3 .\r\tself assert: result equals: \'Pling\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.860687-04:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test03_TheSoundFor5IsPlang,			#protocol : #tests,			#sourceCode : 'test03_TheSoundFor5IsPlang\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 5 .\r\tself assert: result equals: \'Plang\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.862259-04:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test04_TheSoundFor7IsPlong,			#protocol : #tests,			#sourceCode : 'test04_TheSoundFor7IsPlong\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 7 .\r\tself assert: result equals: \'Plong\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.86278-04:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test05_TheSoundFor6IsPlingAsItHasAFactor3,			#protocol : #tests,			#sourceCode : 'test05_TheSoundFor6IsPlingAsItHasAFactor3\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 6 .\r\tself assert: result equals: \'Pling\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.863246-04:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test06_2ToThePower3DoesNotMakeARaindropSoundAs3IsTheExponentNotTheBase,			#protocol : #tests,			#sourceCode : 'test06_2ToThePower3DoesNotMakeARaindropSoundAs3IsTheExponentNotTheBase\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 8 .\r\tself assert: result equals: \'8\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.863825-04:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test07_TheSoundFor9IsPlingAsItHasAFactor3,			#protocol : #tests,			#sourceCode : 'test07_TheSoundFor9IsPlingAsItHasAFactor3\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 9 .\r\tself assert: result equals: \'Pling\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.86429-04:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test08_TheSoundFor10IsPlangAsItHasAFactor5,			#protocol : #tests,			#sourceCode : 'test08_TheSoundFor10IsPlangAsItHasAFactor5\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 10 .\r\tself assert: result equals: \'Plang\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.874827-04:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test09_TheSoundFor14IsPlongAsItHasAFactorOf7,			#protocol : #tests,			#sourceCode : 'test09_TheSoundFor14IsPlongAsItHasAFactorOf7\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 14 .\r\tself assert: result equals: \'Plong\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.875235-04:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test10_TheSoundFor15IsPlingPlangAsItHasFactors3And5,			#protocol : #tests,			#sourceCode : 'test10_TheSoundFor15IsPlingPlangAsItHasFactors3And5\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 15 .\r\tself assert: result equals: \'PlingPlang\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.875817-04:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test11_TheSoundFor21IsPlingPlongAsItHasFactors3And7,			#protocol : #tests,			#sourceCode : 'test11_TheSoundFor21IsPlingPlongAsItHasFactors3And7\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 21 .\r\tself assert: result equals: \'PlingPlong\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.877644-04:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test12_TheSoundFor25IsPlangAsItHasAFactor5,			#protocol : #tests,			#sourceCode : 'test12_TheSoundFor25IsPlangAsItHasAFactor5\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 25 .\r\tself assert: result equals: \'Plang\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.898959-04:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test13_TheSoundFor27IsPlingAsItHasAFactor3,			#protocol : #tests,			#sourceCode : 'test13_TheSoundFor27IsPlingAsItHasAFactor3\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 27 .\r\tself assert: result equals: \'Pling\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.899675-04:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test14_TheSoundFor35IsPlangPlongAsItHasFactors5And7,			#protocol : #tests,			#sourceCode : 'test14_TheSoundFor35IsPlangPlongAsItHasFactors5And7\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 35 .\r\tself assert: result equals: \'PlangPlong\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.900127-04:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test15_TheSoundFor49IsPlongAsItHasAFactor7,			#protocol : #tests,			#sourceCode : 'test15_TheSoundFor49IsPlongAsItHasAFactor7\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 49 .\r\tself assert: result equals: \'Plong\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.900491-04:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test16_TheSoundFor52Is52,			#protocol : #tests,			#sourceCode : 'test16_TheSoundFor52Is52\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 52 .\r\tself assert: result equals: \'52\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.900711-04:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test17_TheSoundFor105IsPlingPlangPlongAsItHasFactors35And7,			#protocol : #tests,			#sourceCode : 'test17_TheSoundFor105IsPlingPlangPlongAsItHasFactors35And7\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 105 .\r\tself assert: result equals: \'PlingPlangPlong\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-05-31T18:31:59.900906-04:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RaindropsTest,				#isMetaSide : false			},			#name : #test18_TheSoundFor3125IsPlangAsItHasAFactor5,			#protocol : #tests,			#sourceCode : 'test18_TheSoundFor3125IsPlangAsItHasAFactor5\r\t| result |\r\r\tresult := raindropsCalculator convertNumber: 3125 .\r\tself assert: result equals: \'Plang\'',			#stamp : '',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:32:44.792814-04:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SpaceAge,				#isMetaSide : false			},			#name : #'ageOnPlanet:at:',			#protocol : #class,			#sourceCode : 'ageOnPlanet: arg1 at: arg2\r\r\t| tmp1 |\r\ttmp1 := { \r\t\t        (\'Earth\' -> 1).\r\t\t        (\'Mercury\' -> 0.2408467).\r\t\t        (\'Venus\' -> 0.61519726).\r\t\t        (\'Mars\' -> 1.8808158).\r\t\t        (\'Jupiter\' -> 11.862615).\r\t\t        (\'Saturn\' -> 29.447498).\r\t\t        (\'Uranus\' -> 84.016846).\r\t\t        (\'Neptune\' -> 164.79132) } asDictionary.\r\t^ arg2 / 31557600 / (tmp1 at: arg1)',			#stamp : '',			#package : #'Exercise@SpaceAge'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SpaceAge,				#isMetaSide : false			},			#name : #'ageOnPlanet:at:',			#protocol : #class,			#sourceCode : 'ageOnPlanet: aString at: anInteger \r\t| orbitalPeriod |\r\torbitalPeriod := {\r\t\t\'Earth\' -> 1 .\r\t\t\'Mercury\' -> 0.2408467 .\r\t\t\'Venus\' -> 0.61519726 .\r\t\t\'Mars\' -> 1.8808158 .\r\t\t\'Jupiter\' -> 11.862615 .\r\t\t\'Saturn\' -> 29.447498 .\r\t\t\'Uranus\' -> 84.016846 .\r\t\t\'Neptune\' -> 164.79132 . \r\t\t} asDictionary .\r\t^ anInteger / 31557600 / (orbitalPeriod at: aString)\r',			#stamp : 'CalebWeeks 5/31/2023 18:32',			#package : #'Exercise@SpaceAge'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:33:12.764631-04:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Raindrops\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Raindrops\'',				#superclassName : 'Object'			},			#name : #Raindrops,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Raindrops class\r\tinstanceVariableNames: \'\''				},				#name : #'Raindrops class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Raindrops,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Raindrops',			#package : #'Exercise@Raindrops',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:33:54.228096-04:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 18:33',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:34:35.896993-04:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 18:33',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ \'1\'',			#stamp : 'CalebWeeks 5/31/2023 18:34',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:37:27.915167-04:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ \'1\'',			#stamp : 'CalebWeeks 5/31/2023 18:34',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ anInteger toString ',			#stamp : 'CalebWeeks 5/31/2023 18:37',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:38:42.274775-04:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ anInteger toString ',			#stamp : 'CalebWeeks 5/31/2023 18:37',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ anInteger toString',			#stamp : 'CalebWeeks 5/31/2023 18:38',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:44:20.901432-04:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ anInteger toString',			#stamp : 'CalebWeeks 5/31/2023 18:38',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ anInteger printStringBase: 10',			#stamp : 'CalebWeeks 5/31/2023 18:44',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:54:56.006529-04:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger \r\t^ anInteger printStringBase: 10',			#stamp : 'CalebWeeks 5/31/2023 18:44',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:each | result , anInteger printStringBase: 10 ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:54',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:57:08.573798-04:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:each | result , anInteger printStringBase: 10 ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:54',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | result , anInteger printStringBase: 10 ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:57',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:58:07.23711-04:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | result , anInteger printStringBase: 10 ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:57',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | result , \'1\' ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:58',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T18:58:39.356432-04:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | result , \'1\' ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:58',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | (result , \'1\') ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:58',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:01:11.790478-04:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | (result , \'1\') ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 18:58',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | result := result , \'1\' ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:01',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:02:53.361116-04:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:each | result := result , \'1\' ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:01',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:sound | result := result , sound ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:02',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:04:08.188986-04:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:sound | result := result , sound ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:02',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:sound | \r\t\tTranscript show: sound .\r\t\tresult := result , sound .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:04',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:06:07.268522-04:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t\'Pling\' -> 3 .\r\t\t\'Plang\' -> 5 .\r\t\t\'Plong\' -> 7 .\r\t} asDictionary .\r\tsounds do: [:sound | \r\t\tTranscript show: sound .\r\t\tresult := result , sound .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:04',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:sound | \r\t\tTranscript show: sound .\r\t\tresult := result , sound .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:06',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:08:50.825933-04:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:sound | \r\t\tTranscript show: sound .\r\t\tresult := result , sound .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:06',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\tTranscript show: sound .\r\t\tTranscript show: factor .\r\t\tresult := result , sound .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:08',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:11:54.551893-04:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\tTranscript show: sound .\r\t\tTranscript show: factor .\r\t\tresult := result , sound .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:08',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ factor = 0) ifTrue: (result := result , sound) .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:11',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:13:15.492898-04:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ factor = 0) ifTrue: (result := result , sound) .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:11',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ factor = 0) ifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:13',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:14:03.198181-04:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ factor = 0) ifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:13',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ factor = 0)\r\t\t\tifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:14',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:15:21.466739-04:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ factor = 0)\r\t\t\tifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:14',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:sound | \r\t\t(anInteger \\\\ 3 = 0)\r\t\t\tifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:15',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:16:24.439996-04:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:sound | \r\t\t(anInteger \\\\ 3 = 0)\r\t\t\tifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:15',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ 3 = 0)\r\t\t\tifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:16',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:19:02.509259-04:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds do: [:factor :sound | \r\t\t(anInteger \\\\ 3 = 0)\r\t\t\tifTrue: [result := result , sound] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:16',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds associationsDo: [:pair | \r\t\t(anInteger \\\\ pair key = 0)\r\t\t\tifTrue: [result := result , pair value] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:19',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:20:55.602536-04:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds associationsDo: [:pair | \r\t\t(anInteger \\\\ pair key = 0)\r\t\t\tifTrue: [result := result , pair value] .\r\t] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:19',			#package : #'Exercise@Raindrops'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Raindrops,				#isMetaSide : false			},			#name : #'convertNumber:',			#protocol : #class,			#sourceCode : 'convertNumber: anInteger\r\t| sounds result |\r\tresult := \'\' .\r\tsounds := { \r\t\t3 -> \'Pling\' .\r\t\t5 -> \'Plang\' .\r\t\t7 -> \'Plong\' .\r\t} asDictionary .\r\tsounds associationsDo: [:pair | \r\t\t(anInteger \\\\ pair key = 0)\r\t\t\tifTrue: [result := result , pair value] .\r\t] .\r\tresult = \'\'\r\t\tifTrue: [result := anInteger asString] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 19:20',			#package : #'Exercise@Raindrops'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:21:27.574788-04:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpSessionSnapshot {		#imageName : '/home/caleb/exercism/pharo-smalltalk/Pharo.image'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.567342-04:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Isogram',		#affectedPackageName : #'Exercise@Isogram'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.594832-04:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #IsogramTest\r\tinstanceVariableNames: \'isogramCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Isogram\'',				#superclassName : 'ExercismTest'			},			#name : #IsogramTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #IsogramTest,						#isMetaSide : false					},					#name : #isogramCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsogramTest class\r\tinstanceVariableNames: \'\''				},				#name : #'IsogramTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsogramTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Isogram',			#package : #'Exercise@Isogram',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.616917-04:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #IsogramTest\r\tinstanceVariableNames: \'isogramCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Isogram\'',				#superclassName : 'ExercismTest'			},			#name : #IsogramTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #IsogramTest,						#isMetaSide : false					},					#name : #isogramCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsogramTest class\r\tinstanceVariableNames: \'\''				},				#name : #'IsogramTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsogramTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Isogram\r\rDetermine if a word or phrase is an isogram.\r\rAn isogram (also known as a "nonpattern word") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.\r\rExamples of isograms:\r\r- lumberjacks\r- background\r- downstream\r- six-year-old\r\rThe word *isograms*, however, is not an isogram, because the s repeats.\r\r## Hint\r\rThere is a range of interesting data types in Pharo, it\'s worth taking the time to browse the  hierarchy of class Collection and reading some of the class comments and running some of the examples.\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Isogram',			#package : #'Exercise@Isogram',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Isogram\r\rDetermine if a word or phrase is an isogram.\r\rAn isogram (also known as a "nonpattern word") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.\r\rExamples of isograms:\r\r- lumberjacks\r- background\r- downstream\r- six-year-old\r\rThe word *isograms*, however, is not an isogram, because the s repeats.\r\r## Hint\r\rThere is a range of interesting data types in Pharo, it\'s worth taking the time to browse the  hierarchy of class Collection and reading some of the class comments and running some of the examples.\r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.842434-04:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsogramTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: ReverseStringTest)\r\t\tisCore: true;\r\t\tdifficulty: 2;\r\t\ttopics: #(\'strings\' \'iteration\');\r\t\tyourself\r',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.84544-04:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsogramTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'9e0074be-4a3f-0d00-bb4e-73e5071d6982\'',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.850069-04:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsogramTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 28 February 2019"\r\t^\'1.7.0\'',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.853123-04:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tisogramCalculator := Isogram new',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.854861-04:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test01_CheckIfTheGivenStringIsAnIsogramEmptyString,			#protocol : #tests,			#sourceCode : 'test01_CheckIfTheGivenStringIsAnIsogramEmptyString\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.855362-04:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test02_CheckIfTheGivenStringIsAnIsogramIsogramWithOnlyLowerCaseCharacters,			#protocol : #tests,			#sourceCode : 'test02_CheckIfTheGivenStringIsAnIsogramIsogramWithOnlyLowerCaseCharacters\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'isogram\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.856008-04:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test03_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacter,			#protocol : #tests,			#sourceCode : 'test03_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacter\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'eleven\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.856452-04:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test04_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacterFromTheEndOfTheAlphabet,			#protocol : #tests,			#sourceCode : 'test04_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacterFromTheEndOfTheAlphabet\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'zzyzx\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.85688-04:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test05_CheckIfTheGivenStringIsAnIsogramLongestReportedEnglishIsogram,			#protocol : #tests,			#sourceCode : 'test05_CheckIfTheGivenStringIsAnIsogramLongestReportedEnglishIsogram\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'subdermatoglyphic\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.857216-04:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test06_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCase,			#protocol : #tests,			#sourceCode : 'test06_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCase\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'Alphabet\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.858277-04:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test07_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCaseLowercaseFirst,			#protocol : #tests,			#sourceCode : 'test07_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCaseLowercaseFirst\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'alphAbet\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.86063-04:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test08_CheckIfTheGivenStringIsAnIsogramHypotheticalIsogrammicWordWithHyphen,			#protocol : #tests,			#sourceCode : 'test08_CheckIfTheGivenStringIsAnIsogramHypotheticalIsogrammicWordWithHyphen\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'thumbscrew-japingly\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.862495-04:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test09_CheckIfTheGivenStringIsAnIsogramHypotheticalWordWithDuplicatedCharacterFollowingHyphen,			#protocol : #tests,			#sourceCode : 'test09_CheckIfTheGivenStringIsAnIsogramHypotheticalWordWithDuplicatedCharacterFollowingHyphen\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'thumbscrew-jappingly\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.864406-04:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test10_CheckIfTheGivenStringIsAnIsogramIsogramWithDuplicatedHyphen,			#protocol : #tests,			#sourceCode : 'test10_CheckIfTheGivenStringIsAnIsogramIsogramWithDuplicatedHyphen\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'six-year-old\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.864973-04:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test11_CheckIfTheGivenStringIsAnIsogramMadeupNameThatIsAnIsogram,			#protocol : #tests,			#sourceCode : 'test11_CheckIfTheGivenStringIsAnIsogramMadeupNameThatIsAnIsogram\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'Emily Jung Schwartzkopf\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.866712-04:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test12_CheckIfTheGivenStringIsAnIsogramDuplicatedCharacterInTheMiddle,			#protocol : #tests,			#sourceCode : 'test12_CheckIfTheGivenStringIsAnIsogramDuplicatedCharacterInTheMiddle\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'accentor\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:42.86807-04:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test13_CheckIfTheGivenStringIsAnIsogramSameFirstAndLastCharacters,			#protocol : #tests,			#sourceCode : 'test13_CheckIfTheGivenStringIsAnIsogramSameFirstAndLastCharacters\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'angola\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:35:52.762887-04:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Isogram\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Isogram\'',				#superclassName : 'Object'			},			#name : #Isogram,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Isogram class\r\tinstanceVariableNames: \'\''				},				#name : #'Isogram class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Isogram,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Isogram',			#package : #'Exercise@Isogram',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:36:05.897718-04:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 19:36',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:36:23.552327-04:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 19:36',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString \r\t^ True',			#stamp : 'CalebWeeks 5/31/2023 19:36',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:36:38.887432-04:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString \r\t^ True',			#stamp : 'CalebWeeks 5/31/2023 19:36',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString \r\t^ true',			#stamp : 'CalebWeeks 5/31/2023 19:36',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:45:21.229839-04:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString \r\t^ true',			#stamp : 'CalebWeeks 5/31/2023 19:36',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] \r\t\t\tifFalse: [previousLetters add: char]\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:45',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:48:09.263519-04:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] \r\t\t\tifFalse: [previousLetters add: char]\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:45',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:48:45.069234-04:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char capitalized ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:48:54.366429-04:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char capitalized ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char lowercase  ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:48:55.877272-04:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char lowercase  ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char lowercase ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:50:14.435773-04:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\t(previousLetters includes: char) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: char lowercase ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:48',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #class,			#sourceCode : 'isIsogramPhrase: aString\r\t| isIsogram previousLetters lowercaseChar |\r\tisIsogram := true .\r\tpreviousLetters := Set new .\r\taString do: [ :char | \r\t\tlowercaseChar := char lowercase .\r\t\t(previousLetters includes: lowercaseChar ) \r\t\t\tifTrue: [isIsogram := false] .\r\t\t(char isAlphaNumeric)\r\t\t\tifTrue: [ previousLetters add: lowercaseChar ] .\r\t] .\r\t^ isIsogram .\r\t',			#stamp : 'CalebWeeks 5/31/2023 19:50',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.092322-04:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Leap',		#affectedPackageName : #'Exercise@Leap'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.106464-04:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #LeapTest\r\tinstanceVariableNames: \'leapCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Leap\'',				#superclassName : 'ExercismTest'			},			#name : #LeapTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LeapTest,						#isMetaSide : false					},					#name : #leapCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LeapTest class\r\tinstanceVariableNames: \'\''				},				#name : #'LeapTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LeapTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Leap',			#package : #'Exercise@Leap',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.127077-04:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #LeapTest\r\tinstanceVariableNames: \'leapCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Leap\'',				#superclassName : 'ExercismTest'			},			#name : #LeapTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LeapTest,						#isMetaSide : false					},					#name : #leapCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LeapTest class\r\tinstanceVariableNames: \'\''				},				#name : #'LeapTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LeapTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Leap\r\rGiven a year, report if it is a leap year.\r\rThe tricky thing here is that a leap year in the Gregorian calendar occurs:\r\r```text\ron every year that is evenly divisible by 4\r  except every year that is evenly divisible by 100\r    unless the year is also evenly divisible by 400\r```\r\rFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\ryear, but 2000 is.\r\r## Notes\r\rThough our exercise adopts some very simple rules, there is more to\rlearn!\r\rFor a delightful, four minute explanation of the whole leap year\rphenomenon, go watch [this youtube video][video].\r\r[video]: http://www.youtube.com/watch?v=xX96xng7sAE\r\r## Hint\r\rThe tests for this exercise (and future exercises), are prefix numbered like \'test00_\'. \rThis is not a normal convention in Pharo, however to ease the study of the language it is \ruseful to present tests in a deterministic order.\r\rFor this exercise, study the \'arithmetic\' method category for class Number, as well as how boolean operators are also defined as messages. Notice how "and:" and "or:" are implented in the classes True and False. You can use the context menu item "senders of..." to view how other parts of Pharo use these operators.\r\rYou may also find something useful trying... `World > Tools > Finder > Examples > 20 . 4 . true`\r<br> which is asking Pharo which operations between the first and second elements result in the third.\r<br> [View demo][demo]\r\r[demo]: https://github.com/exercism/pharo-smalltalk/raw/master/docs/images/Hint-Finder-Leap.gif',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Leap',			#package : #'Exercise@Leap',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Leap\r\rGiven a year, report if it is a leap year.\r\rThe tricky thing here is that a leap year in the Gregorian calendar occurs:\r\r```text\ron every year that is evenly divisible by 4\r  except every year that is evenly divisible by 100\r    unless the year is also evenly divisible by 400\r```\r\rFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\ryear, but 2000 is.\r\r## Notes\r\rThough our exercise adopts some very simple rules, there is more to\rlearn!\r\rFor a delightful, four minute explanation of the whole leap year\rphenomenon, go watch [this youtube video][video].\r\r[video]: http://www.youtube.com/watch?v=xX96xng7sAE\r\r## Hint\r\rThe tests for this exercise (and future exercises), are prefix numbered like \'test00_\'. \rThis is not a normal convention in Pharo, however to ease the study of the language it is \ruseful to present tests in a deterministic order.\r\rFor this exercise, study the \'arithmetic\' method category for class Number, as well as how boolean operators are also defined as messages. Notice how "and:" and "or:" are implented in the classes True and False. You can use the context menu item "senders of..." to view how other parts of Pharo use these operators.\r\rYou may also find something useful trying... `World > Tools > Finder > Examples > 20 . 4 . true`\r<br> which is asking Pharo which operations between the first and second elements result in the third.\r<br> [View demo][demo]\r\r[demo]: https://github.com/exercism/pharo-smalltalk/raw/master/docs/images/Hint-Finder-Leap.gif',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.627161-04:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LeapTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: TwoFerTest)\r\t\tisCore: true;\r\t\tdifficulty: 1;\r\t\ttopics: #(\'math\' \'conditionals\' \'logic\');\r\t\tyourself\r\t\r\t\t\t\t',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.638795-04:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LeapTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'82b07f5c-119c-4250-8c07-a0a7e1a95458\'',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.653342-04:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LeapTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 25 February 2019"\r\t^\'1.5.1\'',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.668775-04:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tleapCalculator := Leap new',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.669752-04:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test01_YearNotDivisibleBy4CommonYear,			#protocol : #tests,			#sourceCode : 'test01_YearNotDivisibleBy4CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 2015 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.670406-04:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test02_YearDivisibleBy2NotDivisibleBy4CommonYear,			#protocol : #tests,			#sourceCode : 'test02_YearDivisibleBy2NotDivisibleBy4CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 1970 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.671403-04:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test03_YearDivisibleBy4NotDivisibleBy100LeapYear,			#protocol : #tests,			#sourceCode : 'test03_YearDivisibleBy4NotDivisibleBy100LeapYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 1996 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.672329-04:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test04_YearDivisibleBy100NotDivisibleBy400CommonYear,			#protocol : #tests,			#sourceCode : 'test04_YearDivisibleBy100NotDivisibleBy400CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 2100 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.673098-04:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test05_YearDivisibleBy400LeapYear,			#protocol : #tests,			#sourceCode : 'test05_YearDivisibleBy400LeapYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 2000 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.67392-04:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test06_YearDivisibleBy200NotDivisibleBy400CommonYear,			#protocol : #tests,			#sourceCode : 'test06_YearDivisibleBy200NotDivisibleBy400CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 1800 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:49.674352-04:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #testMisuseOfSelector,			#protocol : #extra,			#sourceCode : 'testMisuseOfSelector\r\tself verifySolution: leapCalculator class avoidsSelector: #isLeapYear',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:52:59.213006-04:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Leap\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Leap\'',				#superclassName : 'Object'			},			#name : #Leap,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Leap class\r\tinstanceVariableNames: \'\''				},				#name : #'Leap class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Leap,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Leap',			#package : #'Exercise@Leap',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:53:13.249639-04:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #class,			#sourceCode : 'leapYear: anInteger \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 19:53',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:56:38.281298-04:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #class,			#sourceCode : 'leapYear: anInteger \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 19:53',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #class,			#sourceCode : 'leapYear: year \r\t^ (year % 400 = 0) or: ((year % 4 = 0) and: (year % 100 ~= 0))',			#stamp : 'CalebWeeks 5/31/2023 19:56',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:56:47.490981-04:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpSessionSnapshot {		#imageName : '/home/caleb/exercism/pharo-smalltalk/Pharo.image'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.269064-04:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@TwelveDays',		#affectedPackageName : #'Exercise@TwelveDays'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.288356-04:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #TwelveDaysTest\r\tinstanceVariableNames: \'twelveDaysCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@TwelveDays\'',				#superclassName : 'ExercismTest'			},			#name : #TwelveDaysTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TwelveDaysTest,						#isMetaSide : false					},					#name : #twelveDaysCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TwelveDaysTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TwelveDaysTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TwelveDaysTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@TwelveDays',			#package : #'Exercise@TwelveDays',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.298511-04:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #TwelveDaysTest\r\tinstanceVariableNames: \'twelveDaysCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@TwelveDays\'',				#superclassName : 'ExercismTest'			},			#name : #TwelveDaysTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TwelveDaysTest,						#isMetaSide : false					},					#name : #twelveDaysCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TwelveDaysTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TwelveDaysTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TwelveDaysTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Twelve Days\r\rOutput the lyrics to \'The Twelve Days of Christmas\'.\r\r```text\rOn the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.\r\rOn the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r```\r\r## Hint\r\rIts handy to have a list of the verses:\r\r^ #(\r\t\'a Partridge in a Pear Tree\'\r\t\'two Turtle Doves\'\r\t\'three French Hens\'\r\t\'four Calling Birds\'\r\t\'five Gold Rings\'\r\t\'six Geese-a-Laying\' \r\t\'seven Swans-a-Swimming\' \r\t\'eight Maids-a-Milking\' \r\t\'nine Ladies Dancing\'\r\t\'ten Lords-a-Leaping\' \r\t\'eleven Pipers Piping\' \r\t\'twelve Drummers Drumming\' )\r\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@TwelveDays',			#package : #'Exercise@TwelveDays',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Twelve Days\r\rOutput the lyrics to \'The Twelve Days of Christmas\'.\r\r```text\rOn the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.\r\rOn the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r\rOn the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\r```\r\r## Hint\r\rIts handy to have a list of the verses:\r\r^ #(\r\t\'a Partridge in a Pear Tree\'\r\t\'two Turtle Doves\'\r\t\'three French Hens\'\r\t\'four Calling Birds\'\r\t\'five Gold Rings\'\r\t\'six Geese-a-Laying\' \r\t\'seven Swans-a-Swimming\' \r\t\'eight Maids-a-Milking\' \r\t\'nine Ladies Dancing\'\r\t\'ten Lords-a-Leaping\' \r\t\'eleven Pipers Piping\' \r\t\'twelve Drummers Drumming\' )\r\r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.600316-04:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TwelveDaysTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: TwoFerTest)\r\t\tisCore: false;\r\t\tdifficulty: 2;\r\t\ttopics: #(\'strings\' \'iteration\' \'text_formatting\');\r\t\tyourself\r\t\r\t\t\t\t',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.601758-04:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TwelveDaysTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'7047d916-9d41-0d00-8ff2-3a9808866539\'',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.602996-04:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TwelveDaysTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 29 March 2019"\r\t^\'1.2.0\'',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.604016-04:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\ttwelveDaysCalculator := TwelveDays new',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.604998-04:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test01_VerseFirstDayAPartridgeInAPearTree,			#protocol : #tests,			#sourceCode : 'test01_VerseFirstDayAPartridgeInAPearTree\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 1 endVerse: 1 .\r\tself assert: result equals: #(\'On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.60583-04:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test02_VerseSecondDayTwoTurtleDoves,			#protocol : #tests,			#sourceCode : 'test02_VerseSecondDayTwoTurtleDoves\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 2 endVerse: 2 .\r\tself assert: result equals: #(\'On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.607047-04:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test03_VerseThirdDayThreeFrenchHens,			#protocol : #tests,			#sourceCode : 'test03_VerseThirdDayThreeFrenchHens\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 3 endVerse: 3 .\r\tself assert: result equals: #(\'On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.60816-04:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test04_VerseFourthDayFourCallingBirds,			#protocol : #tests,			#sourceCode : 'test04_VerseFourthDayFourCallingBirds\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 4 endVerse: 4 .\r\tself assert: result equals: #(\'On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.608909-04:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test05_VerseFifthDayFiveGoldRings,			#protocol : #tests,			#sourceCode : 'test05_VerseFifthDayFiveGoldRings\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 5 endVerse: 5 .\r\tself assert: result equals: #(\'On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.609661-04:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test06_VerseSixthDaySixGeesealaying,			#protocol : #tests,			#sourceCode : 'test06_VerseSixthDaySixGeesealaying\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 6 endVerse: 6 .\r\tself assert: result equals: #(\'On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.620096-04:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test07_VerseSeventhDaySevenSwansaswimming,			#protocol : #tests,			#sourceCode : 'test07_VerseSeventhDaySevenSwansaswimming\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 7 endVerse: 7 .\r\tself assert: result equals: #(\'On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.623705-04:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test08_VerseEighthDayEightMaidsamilking,			#protocol : #tests,			#sourceCode : 'test08_VerseEighthDayEightMaidsamilking\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 8 endVerse: 8 .\r\tself assert: result equals: #(\'On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.628057-04:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test09_VerseNinthDayNineLadiesDancing,			#protocol : #tests,			#sourceCode : 'test09_VerseNinthDayNineLadiesDancing\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 9 endVerse: 9 .\r\tself assert: result equals: #(\'On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.630766-04:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test10_VerseTenthDayTenLordsaleaping,			#protocol : #tests,			#sourceCode : 'test10_VerseTenthDayTenLordsaleaping\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 10 endVerse: 10 .\r\tself assert: result equals: #(\'On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.643019-04:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test11_VerseEleventhDayElevenPipersPiping,			#protocol : #tests,			#sourceCode : 'test11_VerseEleventhDayElevenPipersPiping\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 11 endVerse: 11 .\r\tself assert: result equals: #(\'On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.643799-04:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test12_VerseTwelfthDayTwelveDrummersDrumming,			#protocol : #tests,			#sourceCode : 'test12_VerseTwelfthDayTwelveDrummersDrumming\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 12 endVerse: 12 .\r\tself assert: result equals: #(\'On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.64435-04:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test13_LyricsRecitesFirstThreeVersesOfTheSong,			#protocol : #tests,			#sourceCode : 'test13_LyricsRecitesFirstThreeVersesOfTheSong\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 1 endVerse: 3 .\r\tself assert: result equals: #(\'On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.\' \'On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.64482-04:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test14_LyricsRecitesThreeVersesFromTheMiddleOfTheSong,			#protocol : #tests,			#sourceCode : 'test14_LyricsRecitesThreeVersesFromTheMiddleOfTheSong\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 4 endVerse: 6 .\r\tself assert: result equals: #(\'On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:36.645568-04:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDaysTest,				#isMetaSide : false			},			#name : #test15_LyricsRecitesTheWholeSong,			#protocol : #tests,			#sourceCode : 'test15_LyricsRecitesTheWholeSong\r\t| result |\r\r\tresult := twelveDaysCalculator reciteStartVerse: 1 endVerse: 12 .\r\tself assert: result equals: #(\'On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.\' \'On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' \'On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\' )',			#stamp : '',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T19:59:48.527264-04:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TwelveDays\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@TwelveDays\'',				#superclassName : 'Object'			},			#name : #TwelveDays,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TwelveDays class\r\tinstanceVariableNames: \'\''				},				#name : #'TwelveDays class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TwelveDays,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@TwelveDays',			#package : #'Exercise@TwelveDays',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:00:06.327924-04:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: anInteger endVerse: anInteger2 \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:00',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:00:57.683205-04:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: anInteger endVerse: anInteger2 \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:00',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: anInteger endVerse: anInteger2 \r\t^ \'nothing\'',			#stamp : 'CalebWeeks 5/31/2023 20:00',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:10:50.301561-04:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: anInteger endVerse: anInteger2 \r\t^ \'nothing\'',			#stamp : 'CalebWeeks 5/31/2023 20:00',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new .\r\tstart to: end do: [ :verse | song put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:10',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:11:17.914909-04:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new .\r\tstart to: end do: [ :verse | song put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:10',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:11',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:12:24.290132-04:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:11',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := #()\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:12',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:13:00.083865-04:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := #()\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:12',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := #() .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:13',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:15:42.756373-04:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := #() .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:13',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:15',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:17:54.936099-04:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:15',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := { } .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:17',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:20:08.506462-04:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := { } .\r\tstart to: end do: [ :verse | song add: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:17',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := { } .\r\tstart to: end do: [ :verse | song put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:20',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:21:14.414686-04:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := { } .\r\tstart to: end do: [ :verse | song put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:20',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song at: (start - verse) put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:21',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:21:48.397453-04:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song at: (start - verse) put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:21',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song at: (start - verse + 1) put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:21',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:22:45.869606-04:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song at: (start - verse + 1) put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:21',			#package : #'Exercise@TwelveDays'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwelveDays,				#isMetaSide : false			},			#name : #'reciteStartVerse:endVerse:',			#protocol : #class,			#sourceCode : 'reciteStartVerse: start endVerse: end \r\t| verses cardinal song |\r\tcardinal := #(\'first\' \'second\' \'third\' \'fourth\' \'fifth\' \'sixth\' \'seventh\' \'eigth\' \'ninth\' \'tenth\' \'eleventh\' \'twelfth\') .\r\tverses := #( \'a Partridge in a Pear Tree\' \'two Turtle Doves\' \'three French Hens\' \'four Calling Birds\' \'five Gold Rings\' \'six Geese-a-Laying\' \'seven Swans-a-Swimming\' \'eight Maids-a-Milking\' \'nine Ladies Dancing\' \'ten Lords-a-Leaping\' \'eleven Pipers Piping\' \'twelve Drummers Drumming\' ) .\r\tsong := Array new: (end - start + 1) .\r\tstart to: end do: [ :verse | song at: (start - verse + 1) put: \'On the \' , (cardinal at: verse) , \' day of Christmas my true love gave to me: \' , (verses at: verse) , \'.\' ] .\r\t^ song',			#stamp : 'CalebWeeks 5/31/2023 20:22',			#package : #'Exercise@TwelveDays'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:23:30.723192-04:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpSessionSnapshot {		#imageName : '/home/caleb/exercism/pharo-smalltalk/Pharo.image'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:23.791379-04:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Grains',		#affectedPackageName : #'Exercise@Grains'	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:23.799784-04:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #GrainsTest\r\tinstanceVariableNames: \'grainsCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Grains\'',				#superclassName : 'ExercismTest'			},			#name : #GrainsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GrainsTest,						#isMetaSide : false					},					#name : #grainsCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GrainsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'GrainsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GrainsTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Grains',			#package : #'Exercise@Grains',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:23.805023-04:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #GrainsTest\r\tinstanceVariableNames: \'grainsCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Grains\'',				#superclassName : 'ExercismTest'			},			#name : #GrainsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GrainsTest,						#isMetaSide : false					},					#name : #grainsCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GrainsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'GrainsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GrainsTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Grains\r\rCalculate the number of grains of wheat on a chessboard given that the number\ron each square doubles.\r\rThere once was a wise servant who saved the life of a prince. The king\rpromised to pay whatever the servant could dream up. Knowing that the\rking loved chess, the servant told the king he would like to have grains\rof wheat. One grain on the first square of a chess board, with the number\rof grains doubling on each successive square.\r\rThere are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).\r\rWrite code that shows:\r- how many grains were on a given square, and\r- the total number of grains on the chessboard\r\r## For bonus points\r\rDid you get the tests passing and the code clean? If you want to, these\rare some additional things you could try:\r\r- Optimize for speed.\r- Optimize for readability.\r\rThen please share your thoughts in a comment on the submission. Did this\rexperiment make the code better? Worse? Did you learn anything from it?\r\r## Hint\r\rThese kinds of problems (where an answer is dependent on a previous) one are often called recursion. There are different ways to code for recursion, it might be worth reasearching if you are not familiar with this. Pharo is well optimised for recursion, and it is a commonly used pattern.\r\rNote: in the original problem specification, the grainsCalculator is called via #square, however we have renamed this method #atSquare: which is a more Smalltalk like name, that better describes that you are asking for an answer "at a square".  \r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Grains',			#package : #'Exercise@Grains',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Grains\r\rCalculate the number of grains of wheat on a chessboard given that the number\ron each square doubles.\r\rThere once was a wise servant who saved the life of a prince. The king\rpromised to pay whatever the servant could dream up. Knowing that the\rking loved chess, the servant told the king he would like to have grains\rof wheat. One grain on the first square of a chess board, with the number\rof grains doubling on each successive square.\r\rThere are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).\r\rWrite code that shows:\r- how many grains were on a given square, and\r- the total number of grains on the chessboard\r\r## For bonus points\r\rDid you get the tests passing and the code clean? If you want to, these\rare some additional things you could try:\r\r- Optimize for speed.\r- Optimize for readability.\r\rThen please share your thoughts in a comment on the submission. Did this\rexperiment make the code better? Worse? Did you learn anything from it?\r\r## Hint\r\rThese kinds of problems (where an answer is dependent on a previous) one are often called recursion. There are different ways to code for recursion, it might be worth reasearching if you are not familiar with this. Pharo is well optimised for recursion, and it is a commonly used pattern.\r\rNote: in the original problem specification, the grainsCalculator is called via #square, however we have renamed this method #atSquare: which is a more Smalltalk like name, that better describes that you are asking for an answer "at a square".  \r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.300816-04:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GrainsTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: IsogramTest)\r\t\tisCore: true;\r\t\tdifficulty: 2;\r\t\ttopics: #(\'math\' \'recursion\');\r\t\tyourself\r',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.305948-04:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GrainsTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'93dde1bb-8040-0d00-812a-052301deb008\'',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.307274-04:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GrainsTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 15 March 2019"\r\t^\'1.2.0\'',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.308388-04:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tgrainsCalculator := Grains new',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.310183-04:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test01_ReturnsTheNumberOfGrainsOnTheSquareAt1,			#protocol : #tests,			#sourceCode : 'test01_ReturnsTheNumberOfGrainsOnTheSquareAt1\r\t| result |\r\r\tresult := grainsCalculator atSquare: 1 .\r\tself assert: result equals: 1',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.321591-04:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test02_ReturnsTheNumberOfGrainsOnTheSquareAt2,			#protocol : #tests,			#sourceCode : 'test02_ReturnsTheNumberOfGrainsOnTheSquareAt2\r\t| result |\r\r\tresult := grainsCalculator atSquare: 2 .\r\tself assert: result equals: 2',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.322248-04:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test03_ReturnsTheNumberOfGrainsOnTheSquareAt3,			#protocol : #tests,			#sourceCode : 'test03_ReturnsTheNumberOfGrainsOnTheSquareAt3\r\t| result |\r\r\tresult := grainsCalculator atSquare: 3 .\r\tself assert: result equals: 4',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.323008-04:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test04_ReturnsTheNumberOfGrainsOnTheSquareAt4,			#protocol : #tests,			#sourceCode : 'test04_ReturnsTheNumberOfGrainsOnTheSquareAt4\r\t| result |\r\r\tresult := grainsCalculator atSquare: 4 .\r\tself assert: result equals: 8',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.323647-04:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test05_ReturnsTheNumberOfGrainsOnTheSquareAt16,			#protocol : #tests,			#sourceCode : 'test05_ReturnsTheNumberOfGrainsOnTheSquareAt16\r\t| result |\r\r\tresult := grainsCalculator atSquare: 16 .\r\tself assert: result equals: 32768',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.324287-04:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test06_ReturnsTheNumberOfGrainsOnTheSquareAt32,			#protocol : #tests,			#sourceCode : 'test06_ReturnsTheNumberOfGrainsOnTheSquareAt32\r\t| result |\r\r\tresult := grainsCalculator atSquare: 32 .\r\tself assert: result equals: 2147483648',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.324817-04:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test07_ReturnsTheNumberOfGrainsOnTheSquareAt64,			#protocol : #tests,			#sourceCode : 'test07_ReturnsTheNumberOfGrainsOnTheSquareAt64\r\t| result |\r\r\tresult := grainsCalculator atSquare: 64 .\r\tself assert: result equals: 9223372036854775808',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.326785-04:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test08_ReturnsTheNumberOfGrainsOnTheSquareSquare0RaisesAnException,			#protocol : #tests,			#sourceCode : 'test08_ReturnsTheNumberOfGrainsOnTheSquareSquare0RaisesAnException\r\tself\r\t\tshould: [grainsCalculator atSquare: 0]\r\t\traise: Error\r\t\twhoseDescriptionIncludes: \'square must be between 1 and 64\'\r\t\tdescription: \'Should get an error with the correct description\'.\r\t\t\r\t\t\r\t\t\r',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.328433-04:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test09_ReturnsTheNumberOfGrainsOnTheSquareNegativeSquareRaisesAnException,			#protocol : #tests,			#sourceCode : 'test09_ReturnsTheNumberOfGrainsOnTheSquareNegativeSquareRaisesAnException\r\tself\r\t\tshould: [grainsCalculator atSquare: -1]\r\t\traise: Error\r\t\twhoseDescriptionIncludes: \'square must be between 1 and 64\'\r\t\tdescription: \'Should get an error with the correct description\'.',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.328905-04:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test10_ReturnsTheNumberOfGrainsOnTheSquareSquareGreaterThan64RaisesAnException,			#protocol : #tests,			#sourceCode : 'test10_ReturnsTheNumberOfGrainsOnTheSquareSquareGreaterThan64RaisesAnException\r\tself\r\t\tshould: [grainsCalculator atSquare: 65]\r\t\traise: Error\r\t\twhoseDescriptionIncludes: \'square must be between 1 and 64\'\r\t\tdescription: \'Should get an error with the correct description\'.',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:24.329572-04:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test11_ReturnsTheTotalNumberOfGrainsOnTheBoard,			#protocol : #tests,			#sourceCode : 'test11_ReturnsTheTotalNumberOfGrainsOnTheBoard\r\t| result |\r\r\tresult := grainsCalculator total.\r\tself assert: result equals: 18446744073709551615',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:32.164613-04:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Grains\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Grains\'',				#superclassName : 'Object'			},			#name : #Grains,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Grains class\r\tinstanceVariableNames: \'\''				},				#name : #'Grains class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Grains,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Grains',			#package : #'Exercise@Grains',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:24:43.6331-04:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: anInteger \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:24',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:26:48.126619-04:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: anInteger \r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:24',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square \r\t^ 2 raisedTo: square  ',			#stamp : 'CalebWeeks 5/31/2023 20:26',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:27:11.992092-04:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square \r\t^ 2 raisedTo: square  ',			#stamp : 'CalebWeeks 5/31/2023 20:26',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square \r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:27',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:29:37.967366-04:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square \r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:27',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: Error describes: \'square must be between 1 and 64\' .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:29',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:29:49.489136-04:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: Error describes: \'square must be between 1 and 64\' .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:29',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [Error describes: \'square must be between 1 and 64\'] .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:29',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:32:17.541678-04:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [Error describes: \'square must be between 1 and 64\'] .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:29',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new describes:  \'square must be between 1 and 64\'] .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:32',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:32:19.961745-04:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new describes:  \'square must be between 1 and 64\'] .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:32',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new describes: \'square must be between 1 and 64\'] .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:32',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:33:14.852629-04:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new describes: \'square must be between 1 and 64\'] .\r\t^ 2 raisedTo: (square - 1)',			#stamp : 'CalebWeeks 5/31/2023 20:32',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new describes: \'square must be between 1 and 64\']\r\t\tifFalse: [ ^ 2 raisedTo: (square - 1) ] .',			#stamp : 'CalebWeeks 5/31/2023 20:33',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:34:33.819148-04:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new describes: \'square must be between 1 and 64\']\r\t\tifFalse: [ ^ 2 raisedTo: (square - 1) ] .',			#stamp : 'CalebWeeks 5/31/2023 20:33',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #class,			#sourceCode : 'atSquare: square\r\t(square < 1 or: square > 64)\r\t\tifTrue: [^ Error new signal: \'square must be between 1 and 64\']\r\t\tifFalse: [ ^ 2 raisedTo: (square - 1) ] .',			#stamp : 'CalebWeeks 5/31/2023 20:34',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:35:10.834513-04:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #'as yet unclassified',			#sourceCode : 'total\r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:35',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:35:11.066261-04:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #'as yet unclassified',			#sourceCode : 'total\r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:35',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:35',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:36:55.461489-04:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\tself shouldBeImplemented.',			#stamp : 'CalebWeeks 5/31/2023 20:35',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + self atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:36',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:37:33.400189-04:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + self atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:36',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t',			#stamp : 'CalebWeeks 5/31/2023 20:37',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:37:37.976907-04:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t',			#stamp : 'CalebWeeks 5/31/2023 20:37',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:37',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:37:54.063372-04:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:37',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + self atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:37',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:38:45.759767-04:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + self atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:37',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:38',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:38:48.930203-04:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:38',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains new atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:38',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:39:47.893022-04:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains new atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:38',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:39',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:40:27.396356-04:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + Grains atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:39',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + 2 raisedTo: (square - 1)  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:40',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:40:49.137074-04:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + 2 raisedTo: (square - 1)  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:40',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + (2 raisedTo: (square - 1))  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:40',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:41:12.29706-04:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result + (2 raisedTo: (square - 1))  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:40',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + (2 raisedTo: (square - 1))  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:41',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:41:41.690196-04:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + (2 raisedTo: (square - 1))  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:41',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + self atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:41',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:41:43.034315-04:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + self atSquare: square  ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:41',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + self atSquare: square ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:41',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:42:17.037006-04:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + self atSquare: square ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:41',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t| result |\r\tresult := 0 .\r\t1 to: 64 do: [ :square | result := result + (self atSquare: square) ] .\r\t^ result',			#stamp : 'CalebWeeks 5/31/2023 20:42',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'CalebWeeks',		#time : DateAndTime [ '2023-05-31T20:44:30.281034-04:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpSessionSnapshot {		#imageName : '/home/caleb/exercism/pharo-smalltalk/Pharo.image'	}}